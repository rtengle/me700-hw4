import ufl
import numpy as np
import pyvista
import matplotlib as mpl

from mpi4py import MPI
from petsc4py import PETSc

from dolfinx import mesh, fem, io, nls, log, default_real_type, plot
from dolfinx.fem.petsc import NonlinearProblem
from dolfinx.nls.petsc import NewtonSolver
from basix.ufl import element, mixed_element

# Define temporal parameters
t = 0  # Start time
dt = 1e-6
num_steps = 50
T = num_steps * dt  # time step size
S = 1e-2

# Define mesh
nx, ny = 50, 50
domain = mesh.create_rectangle(MPI.COMM_WORLD, [np.array([-2, -2]), np.array([2, 2])],
                               [nx, ny], mesh.CellType.triangle)
P1 = element("Lagrange", domain.basix_cell(), 1, dtype=default_real_type)
ME = fem.functionspace(domain, mixed_element([P1, P1]))
V = fem.functionspace(domain, ("Lagrange", 1))

# Create initial condition
def initial_condition(x, a=5):
    return 1 + np.exp(-a * (x[0]**2 + x[1]**2))

u0 = fem.Function(ME)
H0, eta0 = ufl.split(u0)
u0.sub(0).name = "H0"
u0.sub(0).interpolate(initial_condition)

fdim = domain.topology.dim - 1
boundary_facets = mesh.locate_entities_boundary(domain, fdim, lambda x: np.full(x.shape[1], True, dtype=bool))
bc_H = fem.dirichletbc(PETSc.ScalarType(1), fem.locate_dofs_topological(ME.sub(0), fdim, boundary_facets), ME.sub(0))
bc_eta = fem.dirichletbc(PETSc.ScalarType(0), fem.locate_dofs_topological(ME.sub(1), fdim, boundary_facets), ME.sub(1))

u = fem.Function(ME)
H, eta = ufl.split(u)
u.sub(0).name = "H"
u.sub(0).interpolate(initial_condition)

v = ufl.TestFunction(ME)
q, w = ufl.split(v)

F_H = (
    ( (H - H0)*q - S/3 * (H**3 * ufl.dot( ufl.grad(eta), ufl.grad(q) ) ) * dt ) * ufl.dx
)
F_eta = (
    ( ufl.dot( ufl.grad(H), ufl.grad(w) ) - eta*w ) * ufl.dx
)
F = F_H + F_eta

problem = NonlinearProblem(F, u, [bc_H, bc_eta])
solver = NewtonSolver(MPI.COMM_WORLD, problem)
solver.convergence_criterion = "incremental"
solver.rtol = 1e-6
solver.report = True

#

pyvista.start_xvfb()

grid = pyvista.UnstructuredGrid(*plot.vtk_mesh(V))

plotter = pyvista.Plotter()
plotter.open_gif("H_time.gif", fps=10)

u1_h = u.sub(0).collapse()
grid.point_data["u"] = u1_h.x.array
warped = grid.warp_by_scalar("u", factor=1)

viridis = mpl.colormaps.get_cmap("viridis").resampled(25)
sargs = dict(title_font_size=25, label_font_size=20, fmt="%.2e", color="black",
             position_x=0.1, position_y=0.8, width=0.8, height=0.1)

renderer = plotter.add_mesh(warped, show_edges=True, lighting=False,
                            cmap=viridis, scalar_bar_args=sargs,
                            clim=[0, max(u1_h.x.array)])

for i in range(num_steps):
    try:
        t += dt
        r = solver.solve(u)
        print(f"Step {int(t / dt)}: num iterations: {r[0]}")
        u0.x.array[:] = u.x.array
        u1_h =u.sub(0).collapse()

        # Update plot
        new_warped = grid.warp_by_scalar("u", factor=1)
        warped.points[:, :] = new_warped.points
        warped.point_data["u"][:] = u1_h.x.array
        plotter.write_frame()
    except:
        plotter.close()
        quit()

plotter.close()